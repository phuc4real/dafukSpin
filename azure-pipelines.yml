trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - docs/*
    - '*.md'

variables:
  buildConfiguration: 'Release'
  
  # Docker Configuration (Local)
  imageRepository: 'dafukspin-api'
  imageName: 'dafukspin-api'
  containerName: 'dafukspin-api'
  dockerfilePath: '$(Build.SourcesDirectory)/src/dafukSpin/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: 'Build Docker Image on Homelab'
  jobs:
  - job: BuildImage
    displayName: 'Build Docker Image'
    pool:
      name: 'HomelabPool'
    
    steps:
    - checkout: self
    
    # Build Docker Image locally
    - script: |
        echo "Building Docker image locally..."
        echo "Image: $(imageName):$(tag)"
        
        docker build \
          -f $(dockerfilePath) \
          -t $(imageName):$(tag) \
          -t $(imageName):latest \
          --build-arg BUILD_CONFIGURATION=$(buildConfiguration) \
          $(Build.SourcesDirectory)
        
        echo "✅ Docker image built successfully!"
        docker images $(imageName)
      displayName: 'Build Docker Image'

- stage: Deploy
  displayName: 'Deploy to Homelab'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy to Homelab'
    pool:
      name: 'HomelabPool'
    
    steps:
    - checkout: none
    
    - script: |
        echo "Deploying dafukSpin API to homelab..."
        echo "Using local image: $(imageName):latest"
        
        echo "Stopping existing container if running..."
        docker stop $(containerName) || true
        docker rm $(containerName) || true
        
        echo "Starting new container..."
        docker run -d \
          --name $(containerName) \
          -p 8080:8080 \
          -p 8081:8081 \
          --restart unless-stopped \
          --health-cmd="curl -f http://localhost:8080/health || exit 1" \
          --health-interval=30s \
          --health-timeout=10s \
          --health-start-period=30s \
          --health-retries=3 \
          $(imageName):latest
        
        echo "Container started successfully!"
        
        # Wait for container to be healthy
        echo "Waiting for container to be healthy..."
        timeout 120 bash -c 'until docker inspect --format="{{.State.Health.Status}}" $(containerName) | grep -q "healthy"; do echo "Waiting for health check..."; sleep 5; done' || {
          echo "Health check timeout - checking container logs:"
          docker logs $(containerName)
          exit 1
        }
        
        echo "✅ dafukSpin API deployed successfully and is healthy!"
        docker ps --filter "name=$(containerName)" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
      displayName: 'Deploy Container'
      
    # Optional: Clean up old images to save space
    - script: |
        echo "Cleaning up old Docker images..."
        # Keep last 3 images, remove older ones
        docker images $(imageRepository) --format "{{.Tag}}" | grep -v latest | tail -n +4 | xargs -r docker rmi $(imageRepository): || true
        
        # Remove dangling images
        docker image prune -f || true
        
        echo "Docker cleanup completed"
      displayName: 'Cleanup Old Images'
      continueOnError: true